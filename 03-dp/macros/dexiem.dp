. This is dataplot macro   DEXIEM.DP
. Purpose: Generate a DEX interaction effects matrix (of plots)
.          (= step 4 of the DEXPLOT.DP 10-step DEX analysis procedure)
. Date: May 2005
. Input
.    1. k (parameter)               = Total number of plot factors
.    2. y (vector)                  = Response variable
.    3. x1, x2, x3, . . . (vectors) = Factors
.
.    4. y1displa (parameter)        = displacement for vertical axis label (opt.) (default= 15)
.    5. yoffup   (parameter)        = offset for upper ytic offset (optional) (default = 5)
.    6. cutoff   (parameter)        = cutoff value such that larger |effects| will be hihglighted in red (opt.) (def. = none)
.
.    7. framet (parameter)          = top    frame line (in %) (optional) (default = 90)
.    8. frameb (parameter)          = bottom frame line (in %) (optional) (default = 20)
.
. Output:
.    a 1 page matrix of plots
.
. -----start point-----
.
if tracesw exists and tracesw = 1; print "dexiem.dp"; end if
.
feedback save; feedback off
printing off
let bugswiem = 0
.
if bugswiem = 1
   print " "; print "---At the Beginning of DEXIEM.DP . . ."; pause
end if
.
. -----Step 1: Check input values for existence and equivalent length-----
.
let string stmacro = dexiem.dp
if k not exist
   call determine_k.dp
end if
set check name output filliben
set check equal length output filliben
feedback on
let iflag = check name k y x1 to x^k
let iflag = check equal length y x1 to x^k
feedback off
.
. -----Step 2: Define plot settings-----
.
if bugswiem = 1; print "---At dexiem.dp step 2: limits"
   if ibatch exists and ibatch = 0; pause; end if
end if
call dexplotinit.dp
.
tic offset units screen
tic offset 5 5
let yoffupz = 5
if yoffup exists; let yoffupz = yoffup; end if
ytic offset 5 yoffupz
.
. -----Step 3: Generate the plot-----
.
if bugswiem = 1; print "---At dexiem.dp step 3"
   if ibatch exists and ibatch = 0; pause; end if
   feedback on; echo on
end if
.
let kp1 = k+1
.
x1label;. patch may 20, 2004
x3label;. patch august 10, 2007
.
. -----Step 3.1:
.
if bugswiem = 1; print "---At dexiem.dp step 4"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
if stat not exist
   let string stat = MEAN
end if
.
limits
xlimits -2 2
set frame limit offset on
let xtemp = data -2 2
let xleft xright = xframe xtemp
delete xtemp
.
probe cpumax
let cpumax = probeval
probe cpumin
let cpumin = probeval
let yb = cpumax
let yt = cpumin
loop for j = 1 1 k
    let ytemp    = cross tabulate ^stat y x^j
    let ybt = minimum ytemp
    let ytt = maximum ytemp
    let yb  = min(ybt,yb)
    let yt  = max(ytt,yt)
    delete ytemp
end of loop
.
set frame limit offset off
let ytemp = data yb yt
let ybottom ytop = yframe ytemp
if yminiem exists; let ybottom = ^yminiem; end if
if ymaxiem exists; let ytop    = ^ymaxiem; end if
ylimits ybottom ytop
set frame limit offset on
let ytemp = data ybottom ytop
let ybottom ytop = yframe ytemp
delete ytemp
.
. ylim .75 1.25; . (for Antonio Possolo's problem when both main effects were 0)
. ylim .031 .036;. 02/03/14
.
. -----Step xx:
.
if bugswiem = 1; print "---At dexiem.dp step 5: ybar & auto-number of digits";
   if ibatch exists and ibatch = 0; pause; end if
end if
.
let ybar = mean y
let ybar2 = abs(ybar)
let lybar2 = log10(ybar2)
if lybar2 >= 0; let lybar3 = int(lybar2); end if
if lybar2 < 0; let lybar3 = -int(abs(lybar2))-1; end if
if dp not exist
   let dp = 3-lybar3
   if dp < 0; let dp = 0; end if
end if
set write decimals dp
.
. -----Step xx:
.
if bugswiem = 1; print "---At dexiem.dp step 6: ylim freeze"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
let statflag = 0
if stat exists; let statflag = 1; let string statsave = ^stat; end if
let string stat = mean
.
. -----Step xx:
.
if bugswiem = 1; print "---At dexiem.dp step 7: plot labels"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
if stat = mean
   let string s0 = Average Y
   if cy exists; let string s0 = Average Y (^cy); end if
else
   let string s0 = ^stat Y
   if cy exists; let string s0 = ^stat Y (^cy); end if
end if
if ylabelsw exists and ylabelsw = 0
   let string s0 = sp()
end if
variable label Y ^s0
.
loop for jz = 1 1 k
   if stxshort not exist and stx^jz not exist
      let string s^jz = X^jz
   else if stxshort not exist and stx^jz exists
      let string s^jz = X^jz(^stx^jz)
   else if stxshort exists
      let stjunk = string word stxshort jz
      let string s^jz = X^jz(^stjunk)
   end if
end loop
.
. -----Step xx: Generate the multiplot (via a call to dexstat2.dp)-----
.
if bugswiem = 1; print "---At dexiem.dp step 8: Generate the upper triangle of plots";
   if ibatch exists and ibatch = 0; pause; end if
end if
. erase;. commented out for mills251.dp 2/15/12
,
.                     :. <=====================================================
. call dexstat2.dp
.
x1label displacement 110
x2label displacement 3
.
if y1displa exists
   let y1ldisp = y1displa
else
   let y1ldisp = 10 + 3*k
end if
y1label displacement ^y1ldisp
.
loop for j = 1 1 k
    variable label X^J
    if stx^j exists
       variable label X^J X^J(^stx^j)
    end if
end loop
.
set scatter plot matrix type dex ^stat interaction
set scatter plot matrix labels on
set scatter plot matrix y axis leto
set scatter plot matrix x axis bottom
set scatter plot matrix xtic off
set scatter plot matrix xtic label off
set scatter plot matrix lower diagonal off
set scatter plot matrix x2label filliben
set scatter plot matrix shaded diagonal on
subregion on
subregion xlimits xleft xright
subregion ylimits ybottom ytop
region fill on
region color g85
character circle blank
let k2 = 1.5*k
character hw k2 k
character fill on
character color blue
if colorall exists; character color ^colorall; end if
line solid dotted
let k3 = 2*k
let textexpz = 1
if textexp exists; let textexpz = textexp; end if
let k3 = k3*textexpz
.
tic label size k3
label size k3
.
. Step 4:   Generate the plot
.
dex mean interaction effects plot y x1 to x^k
.
subregion off
region fill off
limits
character blank all
character hw 2 1 all
character color blue all
lines solid all
tic label size default
label size default
x1tic marks on
x1tic mark labels on
label displacement
limits
title
x1label
.
.
if statflag = 1; let string stat = ^statsave; end if
if statflag = 0; delete stat; end if
.
if bugswiem = 1; feedback on; echo on; end if
.
. -----Step xx:
.
if bugswiem = 1; print "---At dexiem.dp step 9"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
if project exists
   if projcol exists; color ^projcol; end if
   call dexwriteproject.dp
end if
.
if bugswiem = 1; feedback on; echo on; end if
.
. -----Step xx:
.
if bugswiem = 1; print "---At dexiem.dp step 10: write out an IEM title line";
   if ibatch exists and ibatch = 0; pause; end if
end if
.
hw 2 1
if titlesiz exists; let titleh = titlesiz; end if
let titlew = titleh/2
hw titleh titlew
.
justification center
if titlesw exist and titlesw = 1 pr titlesw not exist
   move 50 91; text Interaction Effects Matrix
end if
.
just left; hw 2 1
move 15 23; text Diagonal (Shaded)
move 33 23; text = Main Effects
move 15 20; text Off-Diagonal
move 33 20; text = 2-Term Interactions
.
if step exists
   let step = step + 1; hw 2 1; just left; move 5 95
   call tagcorn.dp
end if
.
if annotate exists and annotate = 1
   if colorall exists; color ^colorall; end if
   call annotate.dp
end if
.
if rightmsw exists and rightmsw = 1 or rightmsw not exist
   if stx1 exists and stx1l exists
      let ypdel = 2
      let lh = 1.8
      let lw = 0.9
      if k >= 9
         let ypdel = 1.5; let lh = 1.6; let lw = 0.8
         let string colorl = red blue green black
      end if
      call dexrightmargin.dp
      delete ypdel lh lw
   end if
end if
.
. -----Step xx: If called for, write out customized upper left info-----
.
if stcorn1 exists
   call upperleft.dp
end if
.
. -----Step xx: Finish up-----
.
feedback restore
.
if itime exists and itime = 1
   cpu time
   let t4 = cputime
end of if

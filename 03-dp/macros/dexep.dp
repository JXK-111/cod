. This is dataplot macro   DEXEP.DP
. Purpose: Generate a DEX (absolute) effects plot
.          (= step 7 of the DEXPLOT.DP 10-step DEX analysis procedure)
. Date: May 2005
. Input
.    1. k (parameter)               = Total number of plot factors
.    2. y (vector)                  = Response variable
.    3. x1, x2, x3, . . . (vectors) = Factors
.
.    4. framet (parameter)          = top    frame line (in %) (optional) (default = 90)
.    5. frameb (parameter)          = bottom frame line (in %) (optional) (default = 20)
.    6. maxnumef
.
. -----start point-----
.
if tracesw exists and tracesw = 1; print "dexep.dp"; end if
.
feedback save; feedback off
printing off
let bugswep = 0
.
if bugswep = 1
   print " "
   print "--At the Beginning of Step 7 (DEXEP.DP) . . ."
   print "   numeffec = ^numeffec"
   print y x1 x2 x3
   . feedback on
   . echo on
   if ibatch exists and ibatch = 0; pause; end if
end if
.
. --------------------------------------------
. -----Do Analysis Step 7: |Effects| Plot-----
. --------------------------------------------
.
. -----Step 1: Check for missing input values-----
.
if bugswep = 1; print "--At dexep.dp step 1"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
let string stmacro = dexep.dp
if k not exist
   call determine_k.dp
end if
set check name output filliben
set check length output filliben
feedback on
let iflag = check name k y x1 to x^k
let iflag = check equal length y x1 to x^k
feedback off
.
. -----Step 2: Define plot settings-----
.
if bugswep = 1; print "--At dexep.dp step 2"
   if ibatch exists and ibatch = 0; pause; end if
end if
call dexplotinit.dp
.
. -----Step 3: Compute Confounding Structure-----
.
if bugswep = 1; print "--At dexep.dp step 3"
   if ibatch exists and ibatch = 0; pause; end if
end if
let kp1 = k+1
.
. -----Step 3: Compute  all effect estimates and confounding (the following are all sorted by |eff|)-----
. -----        The number of effects                      (parameter) numeff
. -----        The sorted dummy index (1 to numeff)       (vector)    effindex
. -----        The means at the "high" side               (vector)    meanh
. -----        The means at the "low"  side               (vector)    meanl
. -----        The effect estimates                       (vector)    eff
. -----        The relative effect estimates              (vector)    releff
. -----        The sd(effects)                            (vector)    sdeff
. -----        The t(effects)                             (vector)    teff
. -----        The residual SD for each single model      (vector)    rsd
. -----        The residual SD for each cumulative model  (vector)    cumrsd
. -----        The effect ID's (as multiplier definitions)(strings)   stcore1, stcore2, etc.
. -----        The effect confouding                      (strings)   stconf1, stconf2, etc.
.
. -----        The effect estimates (ordered by | |)      (vector)    eff
. -----        The effect ID's                            (vectors)   effid1, effid2
. -----        The corresponding tags and confounding     (strings)   steft.. and stefc..
.
if bugswep = 1; print "--At dexep.dp step 3"
   if ibatch exists and ibatch = 0; pause; end if
end if
. print "project = ^project"
.
if confsw2 = 1
   if confdone exists and confdone = 0 or confdone not exist
      . call 2_level_design_effects_and_confounding.dp    ;. <=====================
      let stall = string combine x1 to x^k
      let conftag1 conftag2 = dex confound ^stall
      let corefac = dex core ^stall
      let corefac1 = corefa1
      let corefac2 = corefa2
      let corefac3 = corefa3
      let corefac4 = corefa4
      let corefac5 = corefa5
      let numcore = number corefac1
      let confdone = 1
      let coredone = 1
      call est.dp
   end if
end if
.
. -----Step 5: Define characters, lines, spikes, and axis labels for upcoming
.
if bugswep = 1; print "--At dexep.dp step 5"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
title |Effects| Plot
y1label |Effects|
x1label Factor
x3label
label size labelsiz
tic label size ticlabsi
ygrid
x1tics off
x1tic label off
y1tic offset 10
.
char X
call setcircle.dp
.
lines blank
spike on
let s = sd y
.
. -----Step 6: Generate the actual plot-----
.
if bugswep = 1; print "--At dexep.dp step 6"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
delete index; let index = 1 1 numeff
let eff2 = abs(eff)
plot eff2 index
.
. -----Step 7: Write out the ordered factor IDs along the horizontal axis-----
.
if bugswep = 1; print "--At dexep.dp step 7"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
. print index eff eff2 effindex effid1 effid2
let x0pos = xplot for i = 1 1 numeff
let y0pos = 27 for i = 1 1 numeff
if n >= 10
   let y0pos = 23 for i = 1 2 numeff
end if
let tag = sequence 1 1 numeff
character justification cece all
character hw texth textw all
if n > 35
   character hw 1.5 0.75 all
end if
character color blue all
spike color blue all
if colorall exists 
   let coltemp = string word colorall 1
   character color ^coltemp all
   spike color ^coltemp all
end if
character blank all
loop for j = 1 1 numeff
   let plot character j = ^steft^j
end loop
drawds symbol x0pos y0pos tag
.
. -----Step 8: Form the ordered effects box within the frame-----
.
if bugswep = 1; print "--At dexep.dp step 8"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
let numeffp = numeff
if numeff >= 20; let numeffp = 20; end if
if maxnumef exists and numeffp > maxnumef
   let numeffp = maxnumef
end if
.
let length = 0
loop for j = 1 1 numeff
   let lengthj = string length stefc^j
   if lengthj > length; let length = lengthj; end if
end loop
. print "length = ^length"
. pause
.
let fudge = 0.9
let xright = 85
let xleft = xright - 10 - 10 - length*fudge + 1
if xleft >= 59; let xleft = 59; end if
.
let fudge = 1
let y0del = 1
if texth >= 2; let y0del = fudge*texth; end if
let y0 = 86.5 - y0del*numeffp - 1.5
box fill pattern solid; box fill color g80
. box xleft y0 85 90
box xleft y0 xright 90
.
lines dotted
. draw xleft 87 85 87
draw xleft 87 xright 87
.
. -----Step 9: Box: Write out the ranked list of effects within the box within the frame-----
.
if bugswep = 1; print "--At dexep.dp step 9"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
if colorall exists; color ^colorall; end if
.
hw texth textw; just center
let y0 = 88
let x0 = xleft + 3; move x0 y0; text Factor
let x0 = xleft + 11; move x0 y0; text Effect
if length <= 10; let x0 = xleft + 16; end if
if length >= 11; let x0 = xleft + 18; end if
move x0 y0; just left; text Confounding
.
let x0 = xleft + 3; let y0 = 86.5
just center
.
let fudge = 1
let y0del = 1
if texth >= 2; let y0del = fudge*texth; end if
. print texth fudge y0 y0del
. pause
.
character justification center all
character blank all
loop for j = 1 1 numeffp
   let y0 = y0 - y0del
   let y0pos(j) = y0
   let character plot j = ^steft^j
end loop
let tag = sequence 1 1 numeffp
draw symbol x0 y0pos tag
.
let x0 = xleft + 11; let y0 = 86.5
character justification center all
if dpep exists; set write decimals ^dpep; end if
character blank all
loop for j = 1 1 numeffp
   let effj = eff(j)
   let y0 = y0 - y0del
   let y0pos(j) = y0
   let string steffj = ^effj
   if dpep exists; let steffj = number to string effj; end if
   let plot character j =  ^steffj
end loop
draw symbol x0 y0pos tag
set write decimals
.
let x0 = xleft + 18; let y0 = 86.5
character blank all
character justification left all
loop for j = 1 1 numeffp
   let string stout = ^stefc^j
   if stefc^j = -999; let string stout = sp(); end if
   let y0 = y0 - y0del
   let y0pos(j) = y0
   let plot character j =  ^stout
end loop
draw symbol x0 y0pos tag
delete y0pos tag
.
. -----Step 10: Write out the grand mean in upper left corner of the plot-----
.
if bugswep = 1; print "--At dexep.dp step 10"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
let x0 = 35; let y0 = 87; box 15 90 x0 y0
.
let ybar = average y
if colorall exists; color ^colorall; end if
hw texth textw
justification left
let y0 = 90 - texth
let x0 = 17
move x0 y0; text Average = ^ybar
.
. -----Step 11: Annotate the plot-----
.
if bugswep = 1; print "--At dexep.dp step 12"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
if project exists
   if projcol exists; color ^projcol; end if
   call dexwriteproject.dp
end if
.
if step exist
   let step = step + 1; hw 2 1; just left; move 5 95
   . text Step ^step
   call tagcorn.dp
end if
.
if annotate exists and annotate = 1
   if colorall exists; color ^colorall; end if
   call annotate.dp
end if
.
. -----Step 12: Write out right margin factor and setting info-----
.
if rightmsw exists and rightmsw = 1 or rightmsw not exist
   if stx1 exists and stx1l exists
      let ypdel = 2
      let lh = 1.8
      let lw = 0.9
      if k >= 9
         let ypdel = 1.5; let lh = 1.6; let lw = 0.8
         let string colorl = red blue green black
      end if
      call dexrightmargin.dp
      delete ypdel lh lw
   end if
end if
.
. -----Step 13: If called for, write out customized upper left info-----
if stcorn1 exists
   call upperleft.dp
end if
.
. -----Step 13: All Done-----
.
if bugswep = 1; print "--At the end of dexep.dp"; end if
.
box fill pattern off; box fill color g80
grid off
y1tic offset 5
x1tics on
x1tic label on
char blank all
char hw 2 1
lines solid all
spike off
just left
title
y1label
x1label
tic offset 5 5
.
. stat v
. print y x1 x2 x3
. pause
feedback restore
.
if itime exists and itime = 1
   cpu time
   let t7 = cputime
end if

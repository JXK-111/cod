. This is dataplot macro   DEXMP.DP
.
. Purpose: Generate a DEX mean plot = dex main effects plot
.          (or more generally, a dex <stat> plot)
.          (= step 3 of the DEXPLOT.DP 10-step DEX analysis procedure)
.
. Note: Input parameters, vectors, matrices, or strings needed:
.
. Input (Required):
.    1. y (vector)                   = Response variable
.    2. x1, x2, x3, . . . (vectors)  = Factors
.    3. k (parameter)                = Total number of plot factors
.
.    4. k0 (parameter)               = Total number of base factors (not including interactions) (opt.) (def. = k)

. Input (Optional):
.    1. project (string)             = Project title to appear at top of page
.                                      (default = no title)
.    2. sty     (string)             = Name of response variable
.                                      (default = no name)
.    3. stx1, stx2, stx3, . . . (strings) = Names of the 1st, 2nd, 3rd, . . . factors
.                                      (default = no names)
.    4. circlesw  (parameter)        = Switch (0,1) for circles or not
.                                      (default = 1 = circles)
.    5. circleh  (parameter)         = Height of plot circles
.                                      (default = 2)
.    6. circlew  (parameter)         = Width  of plot circles
.                                      (default = 1)
.    7. decplace (parameter)         = Number of decimal places for the effect
.                                      (default = 4)
.    8. decplacr (parameter)         = Number of decimal places for the % relative effects
.                                      (default = 0)
.    9. decplacm (parameter)         = Number of decimal places for the mean
.                                      (default = 4)
.   10. titlesw  (parameter)         = (0,1) Switch for title printing
.                                      (default = 1 ==> "Main Effects Plot)
.   11. titlesiz (parameter)         = Size of title to appear at top of plot
.                                      (default = 2)
.   12. labelsiz (parameter)         = Size of label to appear at right & bottom of plot
.                                      (default = 2)
.   13. writerel (parameter)         = 0 or 1 switch dictating as to whether desire Relative Effects line
.                                      (default = 0 = no relative effects printed)
.   14. trailsw  (parameter)         = (0,1) Switch for trailer printing
.                                      (default = 1 ==> print trailer (but also only i_f existent)
.
.   15. errbarsw (parameter)         = (0,1) switch dictating the plotting of error bars  <====================
.                                      (default = 0 = not plot error bars)
.
.   16. bartype (string)             = line type for the error bars (if existent)
.                                      (default = solid)
.   17. shiftup (parameter)          = amount to shift up for the within frame effect annotation
.                                      (default = not exist = 0)
.   18. rightmsw (parameter)         = (0,1) switch dictating the listing of factors & levels in right margin
.  (default = 1 = yes = list factors and levels, but requires existence of stx1, stx2, . . . and stx1l, stx2l, . . .)
.   19. decplace (parameter)         = number of decimal places for printing the effects
.   20. decplacr (parameter)         = number of decimal places for the relative effects
.                                      (default = 0 = no listing)
.   21. stx1, stx2, stx3, . . . (strings) = Names of the 1st, 2nd, 3rd, . . . factors
.                                      (default = no names)  (e.g., let string stx1 = OvenTemp)
.   22. stx1l, stx2l, stx3l, . . . (strings) = Names of the  levels within each of the factors
.                                      (default = no names)  (e.g., let string stx1l = 1450 1600)
.   23. stxshort (string)            = Multi-component shorter names for each factor (optional)
.   24. framet (parameter)           = top    frame line (in %) (optional) (default = 90)
.   25. frameb (parameter)           = bottom frame line (in %) (optional) (default = 20)
.   21. levelsw (parameter)          = switch dictating the desired type of levels
.                                         (optional, default = not exist)
.                                            1 = classic (-1,0,1) case
.                                            2 = integer (1, 2, 3, 4, ...) case
.                                            3 = pre-existing strings cas
. yminmp (parameter) = vertical axis minimum (default = float)
. ymaxmp (parameter) = vertical axis maximum (default = float)
. Output:
.    coefout (vector of length k)
.    tagout
.    relcoefo
.    cdfout
.
. Note: Graphics output produced = A 1-page plot: DEX Mean Plot (= Main Effects Plot)
.          Vertical   axis = Mean Response for a given level of a given factor
.          Horizontal axis = Each factor and each level within a factor
.
. Note: Graphics interpretation: I_f the mean response differs
.                                across levels within a factor,
.                                then the factor is deemed to "have an effect"
.
. Note: Macros called by this macro:
.       dexcheck.dp, alertk, alertv
.       dexplotiniti.dp
.       dexwriteproject.dp
.       dexknbox.dp
.       tagcorn.dp
.       checkkyx.dp
.       checkinputargumentexistence.dp
.
. Date: May 2005, July 2010
.
. -----start point-----
.
let bugswmp = 0
.
set write decimals
if bugswmp exists and bugswmp = 1; print "dexmp.dp"; end if
.
feedback save
feedback off
printing off
.
if bugswmp = 1
   print " "
   print "---At the Beginning of Step 3 (DEXMP.DP) . . ."
   print "   levelsw = ^levelsw"
   print y x1 x2 x3
   print stx1 stx2 stx3 stx4 stx5
   print stx1l stx2l stx3l stx4l stx5l
   . feedback on
   . echo on
   if ibatch exists and ibatch = 0; pause; end if
end if
.
. -------------------------------------------
. -----Do Analysis Step 3: Dex Mean Plot-----
. -------------------------------------------
.
.
. -----Step 1: Check input values for existence and equivalent length-----
.
let string stmacro = dexmp.dp
if k not exist
   call determine_k.dp
end if
set check name output filliben
set check length output filliben
feedback on
let iflag = check name k y x1 to x^k
let iflag = check equal length y x1 to x^k
feedback off
.
loop for jz = 1 1 k
    let numlev^jz = unique x^jz
    let numlevva(jz) = numlev^jz
end of loop
let numlevto = sum numlevva
let numlevmx = maximum numlevva
let numlevmn = minimum numlevva
let numlevdi = unique numlevva
.
. -----Step 2: Define plot settings-----
.
if bugswmp = 1; print "--At dexmp.dp step 2"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
call dexplotinit.dp
.
let kp1 = k+1
let kp2 = k+2
.
xtic offset 0 0
xlimits 0 kp1
major x1tic number kp2
minor x1tic number 0
.
if k <= 2
   xlim 1 k
   xtic offset 15 15
   major x1tic number k
end if
.
xlabel
x3label Factors (^k)
x3label size 3
if stprex exists
   x3label ^stprex Factors (^k)
end if
x3label displacement 11
if k >= 6
   x3label displacement 13
end if
.
set string space ignore
let string igtempe = cr()
let string igtempo = cr()
if k >= 6
   let string igtempo = cr()
   let string igtempe = cr()sp()cr()
end if
.
let icnt = 0
if k > 2
   let icnt = 1
   let string ig1 = sp()
end if
delete stjunk igtemp2
loop for jz = 1 1 k
    let icnt = icnt + 1
    let string igtemp2 = X^jz
    let string ig^icnt = ^igtemp2
    let ieven = mod(jz,2)
    let string igtemp = ^igtempo
    if ieven = 0
       let string igtemp = ^igtempe
    end if
    if stx^jz exists
       let string stjunk = ^stx^jz
       let ig^icnt = string concatenate igtemp2 igtemp stjunk
    end if
    if stxshort exists
       let stjunk = string word stxshort jz
       let ig^icnt = string concatenate igtemp2 igtemp stjunk
    end if
    delete stjunk igtemp2
end of loop
delete igtemp
if k > 2
   let icnt = icnt + 1
   let string ig^icnt = sp()
end if
let ig = group label ig1 to ig^icnt
x1tic mark label format group label
x1tic mark label content ig
x1tic mark label on
label color blue
tic mark label color blue
.
. ylim
if yminmp exists; ymin ^yminmp; end if
if ymaxmp exists; ymax ^ymaxmp; end if
.
ytic offset 10 5
minor x1tic number 0
if levelsw exists and levelsw = 3; x1tics off; end if
.
. -----Step 3: Generate the plot-----
.
if bugswmp = 1; print "--At dexmp.dp step 3"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
. char X blank
char circle blank
char size 1.1 0.9
char fill on on
call setcircle.dp
char offset 0 0
char color blue all
line color blue all
if colorcha exists
   char color ^colorcha all
   line color ^colorcha all
end if
.
lines solid dotted
.
if titlesiz exists; title size ^titlesiz; end if
if titlesw not exist; title Main Effects Plot; end if
if titlesw exist and titlesw = 1; title Main Effects Plot; end if
.
if sty not exist
   if ylabelsw not exist
      if stat not exist; y1label Mean Response; end if
      if stat exists; y1label ^stat Response; end if
   end if
   if ylabelsw exist and ylabelsw = 1
      if stat not exist; y1label Mean Response; end if
      if stat exists; y1label ^stat Response; end if
   end if
end if
.
if sty exists
   if stat not exist; y1label Mean Response Y (^sty); end if
   if stat exists; y1label ^stat Response Y (^sty); end if
end if
.
label size 3
if labelsiz exists; label size ^labelsiz; end if
if ticlabsi exists; tic label size ^ticlabsi; end if
.
. -----Step 4: Generate & display the basic dex mean plot-----
.
if bugswmp = 1; print "--At dexmp.dp step 4"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
. print stat
. pause
.
if stat not exist
   if k = 1; dex mean plot y x1; end if
   if k >= 2; dex mean plot y x1 to x^k; end if;. <=====================
   . print y x1 x2
   . pause
end if
.
if stat exists
   dex ^stat plot y x1 to x^k
   save
end if
.
skip 0
read dpst1f.dat coefz relcoefz
.
delete xplotd
let xplotd = distinct xplot
retain xplotd for i = 1 1 numlevto
let nxplot = size xplotd
.
if errbarsw exists and errbarsw = 1
   xlimits freeze
   ylimits freeze
end if
.
. -----Step 6: Write out the factor level labels-----
.
if bugswmp = 1; print "--At dexmp.dp step 6"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
let factt = sequence 1 1 k
let cxfactz = sequence factt numlevva
let jstart = 1 for i = 1 1 k
if numlevdi = 1
   let cxplotz = sequence jstart 1 numlevva
else
   let cxplotz = sequence 1 1 numlevto
end if
.
let bz = 18
character justification cece all
let texthz = 2
let textwz = 1
if texth exists; let texthz = texth; end if
if textw exists; let textwz = textw; end if
character hw texthz textwz all
character offset 0 0 all
.
character blank all
if numlevdi = 1
   if numlevmx = 2
     character - +
   else if numlevmx = 3
     character - 0 +
   else if numlevmx = 1
     character 0
   else if numlevmx = 4
     character  1 2 3 4
   else if numlevmx = 5 or numlevmx = 7
     character  1 blank 3 blank 5 blank 7
   else if numlevmx = 6
     character  1 blank . . blank 6
   else if numlevmx = 8
     character 1 blank blank . . blank blank 8
   else if numlevmx = 9
     character 1 blank blank blank 5 blank blank blank 9
   else if numlevmx = 10
     character 1 blank blank 4 blank blank 7 blank blank 10
   else if numlevmx = 11
     character 1 blank blank blank blank 6 blank blank blank blank 11
   else if numlevmx = 12
     character 1 blank blank blank 5 blank blank 8 blank blank blank 12
   else if numlevmx = 13
     character 1 blank blank blank blank blank 7 blank blank blank blank blank 13
   else if numlevmx = 14
     character 1 bl bl bl 5 bl bl bl bl 10 bl bl bl 14
   else if numlevmx = 15
     character 1 bl bl bl bl bl bl 8 bl bl bl bl bl bl 15
   else if numlevmx = 16
     character 1 bl bl bl bl . bl . bl bl bl bl bl bl bl 16
   else if numlevmx >= 17
     character 1
     let plot character numlevmx = ^numlevmx
     let evodd = mod(numlevmx,2)
     if evodd = 1
        let midcaz = (numlevmx + 1)/2
        let plot character midcaz = ^midcaz
     end if
     if evodd = 0
        let midcazm = numlevmx/2
        let midcazp = midcazm + 1
        let plot character midcazm = .
        let plot character midcazp = .
     end if
   end if
else
   let icnt = 0
   character blank all
   .
   .  In code below, only set the non-blank character settings
   .
   set hyphen word separator off
   loop for j = 1 1 k
       let numlevt = numlevva(j)
       let jtemp = j
       if numlevt = 2
         let icnt = icnt + 1
         let plot character icnt = -
         let cxplotz(icnt) = icnt
         let icnt = icnt + 1
         let plot character icnt = +
         let cxplotz(icnt) = icnt
       end if
       if numlevt = 3
         let icnt = icnt + 1
         let plot character icnt = -
         let cxplotz(icnt) = icnt
         let icnt = icnt + 1
         let plot character icnt = 0
         let cxplotz(icnt) = icnt
         let icnt = icnt + 1
         let plot character icnt = +
       end if
       if numlevt = 1
         let icnt = icnt + 1
         let plot character icnt = 0
       end if
       if numlevt = 4
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 1
         let plot character icnt = 2
         let icnt = icnt + 1
         let plot character icnt = 3
         let icnt = icnt + 1
         let plot character icnt = 4
       end if
       if numlevt = 5
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 2
         let plot character icnt = 3
         let icnt = icnt + 2
         let plot character icnt = 5
       end if
       if numlevt = 6
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 2
         let plot character icnt = .
         let icnt = icnt + 1
         let plot character icnt = .
         let icnt = icnt + 2
         let plot character icnt = 6
       end if
       if numlevt = 7
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 2
         let plot character icnt = 3
         let icnt = icnt + 2
         let plot character icnt = 5
         let icnt = icnt + 2
         let plot character icnt = 7
       end if
       if numlevt = 8
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 3
         let plot character icnt = .
         let icnt = icnt + 1
         let plot character icnt = .
         let icnt = icnt + 3
         let plot character icnt = 8
       end if
       if numlevt = 9
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 4
         let plot character icnt = 5
         let icnt = icnt + 4
         let plot character icnt = 9
       end if
       if numlevt = 10
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 3
         let plot character icnt = 4
         let icnt = icnt + 3
         let plot character icnt = 7
         let icnt = icnt + 3
         let plot character icnt = 10
       end if
       if numlevt = 11
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 5
         let plot character icnt = 6
         let icnt = icnt + 5
         let plot character icnt = 11
       end if
       if numlevt = 12
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 4
         let plot character icnt = 5
         let icnt = icnt + 3
         let plot character icnt = 8
         let icnt = icnt + 4
         let plot character icnt = 12
       end if
       if numlevt = 13
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 6
         let plot character icnt = 7
         let icnt = icnt + 6
         let plot character icnt = 13
       end if
       if numlevt = 14
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 4
         let plot character icnt = 5
         let icnt = icnt + 5
         let plot character icnt = 10
         let icnt = icnt + 4
         let plot character icnt = 14
       end if
       if numlevt = 15
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 7
         let plot character icnt = 8
         let icnt = icnt + 7
         let plot character icnt = 15
       end if
       if numlevt = 16
         let icnt = icnt + 1
         let plot character icnt = 1
         let icnt = icnt + 5
         let plot character icnt = .
         let icnt = icnt + 2
         let plot character icnt = .
         let icnt = icnt + 8
         let plot character icnt = 16
       end if
       if numlevt >= 17
         let icnt = icnt + 1
         let plot character icnt = 1
         let evodd = mod(numlevt,2)
         if evodd = 1
            let midcaz = (numlevt + 1)/2
            let icnt = icnt + (midcaz-1)
            let plot character icnt = ^midcaz
            let icnt = icnt + (midcaz-1)
         else
            let midcazm = numlevt/2
            let midcazp = midcazm + 1
            let icnt = icnt + (midcazm-1)
            let plot character icnt = .
            let icnt = icnt + 1
            let plot character icnt = .
            let icnt = icnt + (midcazm-1)
         end if
         let plot character icnt = ^numlevt
       end if
   end of loop
   set hyphen word separator on
end if
.
if levelsw not exist or levelsw = 1
   drawds symbol xplotd bz cxplotz
else if levelsw = 2
   loop for jz = 1 1 numlevmx
       let plot character jz  = ^jz
   end of loop
   drawds symbol xplotd bz cxplotz
else if levelsw = 3
   if stx11 not exist
      drawsymb xplotd bz cxplotz
   else
.
.    User specified strings
.
     loop for jz = 1 1 nxplot
         let az = xplotd(jz)
         let caz = cxplotz(jz)
         let factz = cxfactz(jz)
         let numlevfa = numlev^factz
         moveds az bz
         call dexwritelevel.dp
     end loop
   end if
end if
.
character hw
character justification
.
if levelsw exists and levelsw = 3
   drawdsds xplotd 20 xplotd 19
end if
.
. -----Step 7: Write out . . .-----
.
if bugswmp = 1; print "--At dexmp.dp step 7"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
. let bz = 12
let bz = 12.5
let bz2 = bz - 2
just cece
.
let texthz = 2
let textwz = 1
if texth exists; let texthz = texth; end if
if textw exists; let textwz = textw; end if
.
hw texthz textwz
loop for jz = 1 1 k
   let az = jz
   moveds az bz
   if suv^az exist; text ^suv^az; end if
end loop
.
. -----Step 8: Write out effect estimate value (absolute, then relative), then do anova-----
.
let string stjunk = blue
if coloreff exists; let string stjunk = ^coloreff; end if
.
let wrel = 1
if writerel exists; let wrel = writerel; end if
.
if bugswmp = 1; print "--At dexmp.dp step 8"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
let ybar = mean y
just cece
. hw 1.75 .85   zzzzzz 6/6/16
hw texthz textwz
if texth = 3
   hw 2.8 1.4; let b2z = 20.8+1.4; let b1z = b2z+2.8
else if texth = 4
   hw 3.4 1.7; let b2z = 20.8+1.7; let b1z = b2z+3.4
else if texth = 5
   hw 4.0 2.0; let b2z = 20.8+2.0; let b1z = b2z+4.0
else if texth = 6
   hw 4.6 2.3; let b2z = 20.8+2.3; let b1z = b2z+4.6
end if
if frameb exists and b1z exists; let b1z = b1z - (20 - frameb); end if
if frameb exists and b2z exists; let b2z = b2z - (20 - frameb); end if
.
delete tagz cdfz cdf jstart numlevva
let string stjunk = blue
if coloreff exists; let string stjunk = ^coloreff; end if
.
if wrel = 1
   let b1z = 27
   let b2z = 24.75
   let b3z = 22.5
   let b4z = 20.5
   .
   let cadd1 = 0; let cadd2 = 0
   if shiftup exists; let cadd1 = shiftup; end if
   if frameb exists; let cadd2 = 20 - frameb; end if
   let cadd = cadd1 + cadd2
   .
   let b1z = b1z + cadd
   let b2z = b2z + cadd
   let b3z = b3z + cadd
   let b4z = b4z + cadd
else
   let b1z = b2z
   let b3z = b1z + 1
   .
   if shiftup exists
      let b1z = b1z + shiftup
      let b3z = b3z + shiftup
   end if
end if
.
let nydist = unique y
.
loop for jz = 1 1 k
   let az = jz
   let del = coefz(jz)
   let reldel = relcoefz(jz)
   .
   if decplace exist; let del = round(del,decplace); end if
   if decplace not exist; let del = round(del,2); end if
   .
   if decplacr exists; let reldel = round(reldel,decplacr); end if
   if decplacr not exist; let reldel = round(reldel,0); end if
   .
   let string stjunk2 = ^stjunk
   let ndxjunk = unique x^jz
   .
   printing off
   if ndxjunk = 1 or nydist = 1
      let del = 0
      let reldel = 0
      let coefz(jz) = 0
      let relcoefz(jz) = 0
   end if
   let cdf = 0
   let pvalue = 1
   .
   if ndxjunk >= 2 and nydist > 1
      anova y x^jz   ;. <===========================================
      skip 0; read parameter dpst1f.dat junkp1 junkp2 junkp3 junkp4 junkp5 cdf
   end if
   printing on
   .
   color ^stjunk2
   if cdf >= 95; color red; end if
   if cdf >= 99; color red; end if
   .
   if wrel = 1
      moveds az b1z; text ^del
      moveds az b2z; text ^reldel
      moveds az b3z
      .
      if pvaluesw exists and pvaluesw = 1
         let pvalue = 1 - (cdf/100);. 3/30/15
         let pvaluer = round(pvalue,4); 8/25/15 for this line and next 2 lines
         if pvaluedp exists; let pvaluer = round(pvalue,pvaluedp); end if
         text ^pvaluer
      end if
      .
      if ndxjunk >= 2
         if pvaluesw exists and pvaluesw = 0 or pvaluesw not exist
            let cdf2 = round(cdf,2)
            let cdf3 = round(cdf,3)
            let cdf4 = round(cdf,4)
            moveds az b3z; text ^cdf2
            if cdf >= 99; moveds az b4z; text **; end if
            if cdf >= 95 and cdf < 99; moveds az b4z; text *; end if
         end if
      end if
   end if
   .
   if wrel <> 1
      if cdf >= 95
         moveds az b3z
         if cdf >= 99; text **; else; text *; end if
      end if
      let cdf2 = round(cdf,2)
      let cdf3 = round(cdf,3)
      let cdf4 = round(cdf,4)
      let b4z = b3z + 2; moveds az b4z; text ^cdf2
      moveds az b1z; text ^del
   end if
   .
   let cdfz(jz) = cdf
   .
end loop
color ^stjunk2; delete stjunk stjunk2
let tagz = sequence 1 1 k
.
. if k <= 11
if k <= 5
   if wrel = 1
      move 86 b1z; just lece; hw texthz textwz; text |Effect|
      move 86 b2z; just lece; hw texthz textwz; text Rel.|Effect| (%)
      if pvaluesw not exist
         move 86 b3z; just lece; hw texthz textwz; text Fcdf (%)
      end if
      if pvaluesw exists and pvaluesw = 0
         move 86 b3z; just lece; hw texthz textwz; text Fcdf (%)
      end if
      if pvaluesw exists and pvaluesw = 1
         move 86 b3z; just lece; hw texthz textwz; text p-value
      end if
   end if
   .
   if wrel <> 1
      let b1z = b2z
      move 86 b1z; just lece; hw texthz textwz; text |Effect|
   end if
end if
.
. if k > 11
if k > 5
   if wrel = 1
      move 14 b1z; just rice; hw texthz textwz; text |Effect|
      move 14 b2z; just rice; hw texthz textwz; text Rel.|Effect| (%)
      if pvaluesw not exist
         move 14 b3z; just rice; hw texthz textwz; text Fcdf (%)
      end if
      if pvaluesw exists and pvaluesw = 0
         move 14 b3z; just rice; hw texthz textwz; text Fcdf (%)
      end if
      if pvaluesw exists and pvaluesw = 1
         move 14 b3z; just rice; hw texthz textwz; text p-value
      end if
   end if
   .
   if wrel <> 1
      let b1z = b2z
      move 14 b1z; just rice; hw texthz textwz; text |Effect|
   end if
end if
.
. -----Step 9: I f called for, plot out error bars (confidence bars)-----
.
if bugswmp = 1; print "--At dexmp.dp step 9"; pause; end if
.
if errbarsw exists and errbarsw = 1
   call computestats.dp
   let yplotlcl = yplotm - 2*yplotsdm
   let yplotucl = yplotm + 2*yplotsdm
   call ploterrorbars.dp
end if
.
. -----Step 10: Write out project title, (n,k) box, ybar, and "Step"-----
.
if bugswmp = 1; print "--At dexmp.dp step 10"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
if project exists
   if projcol exists; color ^projcol; end if
   call dexwriteproject.dp
end if
.
call dexknbox.dp
.
let ybar = mean y
if decplacm not exist; let ybarr = round(ybar,4); end if
if decplacm exists; let ybarr = round(ybar,decplacm); end if
move 84 87; just right; hw 2 1; text Mean = ^ybarr; just center
.
if step exist
   let step = step + 1; hw 2 1; just left; move 5 95
   . text Step ^step
   call tagcorn.dp
end if
.
if annotate exists and annotate = 1
   if colorall exists; color ^colorall; end if
   call annotate.dp
end if
.
. -----Step 11: Write out right margin factor and setting info-----
.
if rightmsw exists and rightmsw = 1 or rightmsw not exist
   if stx1 exists and stx1l exists
      let ypdel = 2
      let lh = 1.8
      let lw = 0.9
      if k >= 9
         let ypdel = 1.5; let lh = 1.6; let lw = 0.8
         let string colorl = red blue green black
      end if
      call dexrightmargin.dp
      delete ypdel lh lw
   end if
end if
.
. -----Step 12: If called for, write out customized upper left info-----
.
if stcorn1 exists
   call upperleft.dp
end if
.
. -----Step 13: If called for, print out a target reference line-----
.
if bugswmp = 1; print " "; print "---At dexmp.dp step 13: draw target line"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
if ytarget exists
   lines dotted; drawsdsd 15 ytarget 85 ytarget
   lines solid; drawsdsd 84.25 ytarget 85.75 ytarget
   movesd 86 ytarget; move relative 0 .3; hw 2 1; just lece; text Target = ^ytarget
   just left
end if
.
. -----Step 14: Create the 4 output vectors-----
.
. stat v
. pause
. print coefz
. pause
.
let coefout = coefz
let tagout = tagz
let relcoefo = relcoefz
let cdfout = cdfz
. print tagout coefout relcoefo cdfout
. pause
.
. -----Step 13: All Done-----
.
if bugswmp = 1; print "--At the end of dexmp.dp"
   if ibatch exists and ibatch = 0; pause; end if
end if
.
. xlimits
. ylimits
char blank all
char fill off all
char hw 2 1 all
lines solid all
xtic offset 5 5
ytic offset 5 5
tic label format default
minor xtic number default
major xtic number default
just left
title
y1label
x1label
x3label
x1tic label on
.
. pause
. stop
.
. feedback on
.
delete cxplotz coefz tagz relcoefz cdfz
delete dxz dxjunk
delete coefout tagout relcoefo cdfout
.
feedback restore
.
limits restore
.
if itime exists and itime = 1
   cpu time
   let t3 = cputime
end if
.

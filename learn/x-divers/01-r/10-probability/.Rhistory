library("fitdistrplus")
install.packages("lsei")
library("formattable")
library("GGally", quietly = TRUE)
source("script/setup.r")
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
install.packages("mvtnorm")
library("formattable")
library("ggplot2")
library("formattable")
install.packages("formattable")
install.packages("fitdistrplus")
install.packages(c("fitdistrplus", "formattable", "mc2d"))
install.packages(c("fitdistrplus", "formattable", "mc2d"))
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("RInside")
install.packages("markovchain")
install.packages(c("fitdistrplus", "formattable", "mc2d"))
library("fitdistrplus")
install.packages("fitdistrplus")
if (!require(package)) install.packages('fitdistrplus')
if (!require(package)) install.packages('fitdistrplus')
library(fitdistrplus)
library("fitdistrplus")
library("mc2d")  ## needed for dtriang
library("fitdistrplus")
library("formattable")
require("fitdistrplus")
install.packages(c("fitdistrplus", "formattable", "mc2d"))
install.packages("fitdistrplus")
library("fitdistrplus")
library("formattable")
usePackage <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
usePackage("formattable")
library("formattable")
library("formattable")
library <- function(p)
{
if (!is.element(p, installed.packages()[,1]))
install.packages(p, dep = TRUE)
require(p, character.only = TRUE)
}
library("GGally", quietly = TRUE)
library("mc2d")  ## needed for dtriang
library("mc2d")  ## needed for dtriang
library("ggplot2")
library("ggplot2")
library("mc2d")  ## needed for dtriang
library("fitdistrplus")
library(RColorBrewer)
install.packages("RColorBrewer")
library(RColorBrewer)
library(RColorBrewer)
library("RColorBrewer")
library(getopt)
spec <- matrix(c(
'file' ,'x',1,"character","input file", "calc_cent.csv",
'help' ,'h',0,"logical"   ,"this help" , TRUE
),ncol=6,byrow=T)
opt = getopt(spec);
if (!is.null(opt$help)) {cat(paste(getopt(spec, usage=T),"\n"));q();}
j=1;for (i in spec[,1]){if(is.null(opt[[i]])) opt[[i]]=spec[j,6];j <- j+1;}
library("fitdistrplus")
library("formattable")
library("GGally")
#source("script/setup.r")
library("mc2d")  ## needed for dtriang
library("ggplot2")
calc.distribution <- function(calc_cent){
dist_name <- c("norm", "exp", "weibull", "lnorm", "gamma", "logis", "cauchy", "gumbel", "triang", "binom")
# calc_dist
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
# Computation
calc_dist <- list()
for (i in names(calc_cent)[c(-1,-7)]) {
print(i)
dat <- abs(calc_cent[[i]])
fit <- list()
tryCatch({fit$norm    <- fitdist(dat,dist_name[1])} ,error = function(error_condition)                            {})
tryCatch({fit$exp     <- fitdist(dat,dist_name[2])} ,error = function(error_condition)                            {})
tryCatch({fit$weibull <- fitdist(dat,dist_name[3])} ,error = function(error_condition)                            {})
tryCatch({fit$lnorm   <- fitdist(dat,dist_name[4])} ,error = function(error_condition)                            {})
tryCatch({fit$gamma   <- fitdist(dat,dist_name[5])} ,error = function(error_condition)                            {})
tryCatch({fit$logis   <- fitdist(dat,dist_name[6])} ,error = function(error_condition)                            {})
tryCatch({fit$cauchy  <- fitdist(dat,dist_name[7])} ,error = function(error_condition)                            {})
tryCatch({fit$gumbel  <- fitdist(dat,dist_name[8], start=list(a=10,b=5))} ,error = function(error_condition)      {})
tryCatch({fit$triang  <- fitdist(dat,dist_name[9])} ,error = function(error_condition)                            {})
tryCatch({fit$binom   <- fitdist(dat,dist_name[10] ,start=list(size=8, prob=mean(dat)/8))} ,error = function(error_condition)                            {})
calc_dist[[i]] <- fit
}
return(calc_dist)
}
calc.probability <- function(calc_cent){
# calc_dist
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
# Computation
calc_prob <- list()
for (i in names(calc_cent)[c(-1,-7)]){
prob <- list()
prob$norm <- pnorm(calc_cent[[i]])
prob$exp <- pexp(calc_cent[[i]])
prob$weibull <- pweibull(calc_cent[[i]],shape = 1)
prob$lnorm <- plnorm(calc_cent[[i]])
prob$gamma <- pgamma(calc_cent[[i]], shape = 1)
prob$logis <- plogis(calc_cent[[i]])
prob$cauchy <- pcauchy(calc_cent[[i]])
prob$gumbel <- pgumbel(calc_cent[[i]], a = 1, b=1)
prob$binom <- pbinom(calc_cent[[i]], size=2, prob = 0.5)
prob$triang <- ptriang(calc_cent[[i]])
prob$empirical <- ecdf(calc_cent[[i]])(calc_cent[[i]])
calc_prob[[i]] <- prob
}
return(calc_prob)
}
plot.aic <- function(calc_dist, calc_cent){
dist_name <- c("norm", "exp", "weibull", "lnorm", "gamma", "logis", "cauchy", "gumbel", "triang", "binom")
length_dist <- length(dist_name)
pdf("bin/AIC.pdf")
# plot AIC
loglik <-  matrix(nrow=length(calc_cent), ncol=length_dist)
for (i in 1:length(calc_cent)){
for (j in 1:length_dist)
tryCatch({loglik[i,j] <- calc_dist[[i]][[j]]$loglik}   ,error = function(error_condition) {loglik[i,j] <- NA})
}
loglik <- as.data.frame(loglik)
colnames(loglik)<- dist_name
rownames(loglik)<- paste(c(1:length(calc_cent)),names(calc_cent))
formattable(loglik, row.names=TRUE, list(norm = format, exp = format,weibull = format,lnorm = format,gamma = format,gamm = format,logis = format,cauchy = format))
dev.off()
}
plot.pdf <- function(calc_dist, calc_cent){
pdf("bin/PDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(calc_dist), function(i) {
tryCatch({denscomp(calc_dist[[i]], xlab=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
dev.off()
}
plot.cdf2 <- function(calc_dist, calc_cent){
pdf("bin/CDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(calc_dist), function(i) {
tryCatch({cdfcomp(calc_dist[[i]],ylab= "CDF (%)", xlab="Delay (ms)", xlim = c(200,500), main=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
dev.off()
}
plot.cdf <- function(calc_dist, calc_cent){
library(RColorBrewer)
colors <- sort(brewer.pal(6, "Set1"), decreasing = F)
pdf("cdf.eps", width=6, height=6)
j=1
plot(NA,xlim = c(200,500), ylim = c(0,1),xlab=NA,ylab=NA,main=NA) # Empty plot
for (i in c(1,3,10,12)) {
x <- calc_cent[[i]]
curve(plogis(x, calc_dist[[i]]$logis$estimate[1], calc_dist[[i]]$logis$estimate[2]), 200, 450, col = colors[j], xlab='Delay (ms)', ylab='CDF (%)', cex.lab=1.5, lwd = 2, add = TRUE)
j<-j+1
}
legend('bottomright', names(calc_cent)[c(1,3,10,12)] , lty=1, col=colors, bty='n', cex=1.2, lw=2)
dev.off()
}
plot.hst <- function(data){
pdf("bin/delay.pdf")
layout(rbind(1:2, 3:4, 5:6))
for (i in c(1,3,5,7,9,11)) {
# par(mar=c(1,1,3,1))
hist(data[[i]], xlab = "Delay (ms)", main=names(data)[i])
}
dev.off()
}
tmp=read.csv(file = opt$file)
calc_cent=as.list(tmp)
cprob <- calc.distribution(calc_cent)
cdist <- calc.probability(calc_cent)
plot.aic(cdist, calc_cent)
plot.pdf(cdist, calc_cent)
plot.cdf2(cdist, calc_cent)
plot.aic(cdist, calc_cent)
plot.pdf(cdist, calc_cent)
dev.off()
plot.pdf(cdist, calc_cent)
plot(NA,xlim = c(200,500), ylim = c(0,1),xlab=NA,ylab=NA,main=NA) # Empty plot
plot.cdf2(cdist, calc_cent)
library(RColorBrewer)
colors <- sort(brewer.pal(6, "Set1"), decreasing = F)
#pdf("cdf.eps", width=6, height=6)
j=1
plot(NA,xlim = c(200,500), ylim = c(0,1),xlab=NA,ylab=NA,main=NA) # Empty plot
for (i in c(1,3,10,12)) {
x <- calc_cent[[i]]
curve(plogis(x, cdist[[i]]$logis$estimate[1], cdist[[i]]$logis$estimate[2]), 200, 450, col = colors[j], xlab='Delay (ms)', ylab='CDF (%)', cex.lab=1.5, lwd = 2, add = TRUE)
j<-j+1
}
#	pdf("bin/PDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(cdist), function(i) {
tryCatch({denscomp(cdist[[i]], xlab=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
#	pdf("bin/CDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(cdist), function(i) {
tryCatch({cdfcomp(cdist[[i]],ylab= "CDF (%)", xlab="Delay (ms)", xlim = c(200,500), main=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
denscomp(cdist[[1]], xlab=names(calc_cent)[1])
cdist
class(cdist)
class(cdist[[1]])
cdist[[1]]
names(calc_cent)[1]
names(calc_cent)[2]
names(calc_cent)[3]
denscomp(cdist[[3]], xlab=names(calc_cent)[3])
cprob <- calc.distribution(calc_cent)
calc_cent=as.list(tmp)
cdist <- calc.distribution(calc_cent)
cprob <- calc.probability(calc_cent)
plot.pdf(cdist, calc_cent)
denscomp(cdist[[3]], xlab=names(calc_cent)[3])
plot.pdf(cdist, calc_cent)
library(getopt)
spec <- matrix(c(
'file' ,'x',1,"character","input file", "calc_cent.csv",
'help' ,'h',0,"logical"   ,"this help" , TRUE
),ncol=6,byrow=T)
opt = getopt(spec);
if (!is.null(opt$help)) {cat(paste(getopt(spec, usage=T),"\n"));q();}
j=1;for (i in spec[,1]){if(is.null(opt[[i]])) opt[[i]]=spec[j,6];j <- j+1;}
library("fitdistrplus")
library("formattable")
library("GGally")
#source("script/setup.r")
library("mc2d")  ## needed for dtriang
library("ggplot2")
calc.distribution <- function(calc_cent){
dist_name <- c("norm", "exp", "weibull", "lnorm", "gamma", "logis", "cauchy", "gumbel", "triang", "binom")
# cdist
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
# Computation
cdist <- list()
for (i in names(calc_cent)[c(-1,-7)]) {
print(i)
dat <- abs(calc_cent[[i]])
fit <- list()
tryCatch({fit$norm    <- fitdist(dat,dist_name[1])} ,error = function(error_condition)                            {})
tryCatch({fit$exp     <- fitdist(dat,dist_name[2])} ,error = function(error_condition)                            {})
tryCatch({fit$weibull <- fitdist(dat,dist_name[3])} ,error = function(error_condition)                            {})
tryCatch({fit$lnorm   <- fitdist(dat,dist_name[4])} ,error = function(error_condition)                            {})
tryCatch({fit$gamma   <- fitdist(dat,dist_name[5])} ,error = function(error_condition)                            {})
tryCatch({fit$logis   <- fitdist(dat,dist_name[6])} ,error = function(error_condition)                            {})
tryCatch({fit$cauchy  <- fitdist(dat,dist_name[7])} ,error = function(error_condition)                            {})
tryCatch({fit$gumbel  <- fitdist(dat,dist_name[8], start=list(a=10,b=5))} ,error = function(error_condition)      {})
tryCatch({fit$triang  <- fitdist(dat,dist_name[9])} ,error = function(error_condition)                            {})
tryCatch({fit$binom   <- fitdist(dat,dist_name[10] ,start=list(size=8, prob=mean(dat)/8))} ,error = function(error_condition)                            {})
cdist[[i]] <- fit
}
return(cdist)
}
calc.probability <- function(calc_cent){
# cdist
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
# Computation
cprob <- list()
for (i in names(calc_cent)[c(-1,-7)]){
prob <- list()
prob$norm <- pnorm(calc_cent[[i]])
prob$exp <- pexp(calc_cent[[i]])
prob$weibull <- pweibull(calc_cent[[i]],shape = 1)
prob$lnorm <- plnorm(calc_cent[[i]])
prob$gamma <- pgamma(calc_cent[[i]], shape = 1)
prob$logis <- plogis(calc_cent[[i]])
prob$cauchy <- pcauchy(calc_cent[[i]])
prob$gumbel <- pgumbel(calc_cent[[i]], a = 1, b=1)
prob$binom <- pbinom(calc_cent[[i]], size=2, prob = 0.5)
prob$triang <- ptriang(calc_cent[[i]])
prob$empirical <- ecdf(calc_cent[[i]])(calc_cent[[i]])
cprob[[i]] <- prob
}
return(cprob)
}
plot.aic <- function(cdist, calc_cent){
dist_name <- c("norm", "exp", "weibull", "lnorm", "gamma", "logis", "cauchy", "gumbel", "triang", "binom")
length_dist <- length(dist_name)
pdf("bin/AIC.pdf")
# plot AIC
loglik <-  matrix(nrow=length(calc_cent), ncol=length_dist)
for (i in 1:length(calc_cent)){
for (j in 1:length_dist)
tryCatch({loglik[i,j] <- cdist[[i]][[j]]$loglik}   ,error = function(error_condition) {loglik[i,j] <- NA})
}
loglik <- as.data.frame(loglik)
colnames(loglik)<- dist_name
rownames(loglik)<- paste(c(1:length(calc_cent)),names(calc_cent))
formattable(loglik, row.names=TRUE, list(norm = format, exp = format,weibull = format,lnorm = format,gamma = format,gamm = format,logis = format,cauchy = format))
dev.off()
}
plot.pdf <- function(cdist, calc_cent){
pdf("bin/PDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(cdist), function(i) {
tryCatch({denscomp(cdist[[i]], xlab=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
dev.off()
}
plot.cdf2 <- function(cdist, calc_cent){
pdf("bin/CDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(cdist), function(i) {
tryCatch({cdfcomp(cdist[[i]],ylab= "CDF (%)", xlab="Delay (ms)", xlim = c(200,500), main=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
dev.off()
}
plot.cdf <- function(cdist, calc_cent){
library(RColorBrewer)
colors <- sort(brewer.pal(6, "Set1"), decreasing = F)
pdf("cdf.eps", width=6, height=6)
j=1
plot(NA,xlim = c(200,500), ylim = c(0,1),xlab=NA,ylab=NA,main=NA) # Empty plot
for (i in c(1,3,10,12)) {
x <- calc_cent[[i]]
curve(plogis(x, cdist[[i]]$logis$estimate[1], cdist[[i]]$logis$estimate[2]), 200, 450, col = colors[j], xlab='Delay (ms)', ylab='CDF (%)', cex.lab=1.5, lwd = 2, add = TRUE)
j<-j+1
}
legend('bottomright', names(calc_cent)[c(1,3,10,12)] , lty=1, col=colors, bty='n', cex=1.2, lw=2)
dev.off()
}
plot.hst <- function(data){
pdf("bin/delay.pdf")
layout(rbind(1:2, 3:4, 5:6))
for (i in c(1,3,5,7,9,11)) {
# par(mar=c(1,1,3,1))
hist(data[[i]], xlab = "Delay (ms)", main=names(data)[i])
}
dev.off()
}
tmp=read.csv(file = opt$file)
calc_cent=as.list(tmp)
cdist <- calc.distribution(calc_cent)
write.csv(cdist,"bin/cdist.csv", row.names = FALSE)
cdist
cprob
cprob <- calc.probability(calc_cent)
cprob
write.csv(cprob,"bin/cprob.csv", row.names = FALSE)
round(cprob, 2)
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
round_df(cprob, 2)
cprob$Burt.s.Constraint
round_df(cprob$Burt.s.Constraint, 2)
round_df(cprob[1], 2)
round(cprob[1], 2)
round_df(cprob, digits=3)
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
nums
df[,nums] <- round(df[,nums], digits = digits)
(df)
}
round(cprob[1], 2)
round_df(cprob, digits=3)
head(cprob)
head(cprob)
cprob[1]
cprob[2]
cprob[[2]]
cprob[,1]
cprob[1]
round_df <- function(df, digits) {
nums <- vapply(df, is.numeric, FUN.VALUE = logical(1))
nums
df[nums] <- round(df[nums], digits = digits)
(df)
}
round_df(cprob, digits=3)
round_df(cprob[1], digits=3)
library(dplyr)
cprob %>%
mutate_if(is.numeric, round)
cprob.
as
as.matrix(cprob)
dd[1,1]
dd <- as.matrix(cprob)
dd[1,1]
dd[1,1]
dd
dd[,1]
myData[] <- lapply(cprob,round,2)
myData <- lapply(cprob,round,2)
lapply(seq_along(cdist), function(i) {
round(cdist[[i]],4)
})
lapply(seq_along(cprob), function(i) {
round(cprob[[i]],4)
})
cprob[[1]]
cprob$Burt.s.Constraint
cprob[[1]][1]
round(cprob[[1]][1],3)
round(cprob[[1]][1,],3)
cprob[[1]][1][1]
cprob[[1]][1,2]
cprob[[1]][2,1]
cprob[[1]][1]
cprob[[1]][1]
cprob[[1]][[1]]
cprob[[1]][[1]][1]
round(cprob[[1]][[1]][1],4)
lapply(seq_along(cprob), function(i) {
lapply(seq_along(cprob[[i]]), function(j) {
round(cprob[[i]][[j]],4)
})
})
cprob2 <- lapply(seq_along(cprob), function(i) {
lapply(seq_along(cprob[[i]]), function(j) {
round(cprob[[i]][[j]],4)
})
})
cprob2
write.csv(cprob,"bin/cprob", row.names = FALSE)
tmp=read.csv(file = opt$file)
calc_cent=as.list(tmp)
cdist <- calc.distribution(calc_cent)
cprob <- calc.probability(calc_cent)
cprob2 <- lapply(seq_along(cprob), function(i) {
lapply(seq_along(cprob[[i]]), function(j) {
round(cprob[[i]][[j]],4)
})
})
write.csv(cprob2,"bin/cprob", row.names = FALSE)

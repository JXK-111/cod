library(getopt)
spec <- matrix(c(
'file' ,'x',1,"character","input file", "X.csv",
'help' ,'h',0,"logical"   ,"this help" , TRUE
),ncol=6,byrow=T)
opt = getopt(spec);
if (!is.null(opt$help)) {cat(paste(getopt(spec, usage=T),"\n"));q();}
j=1;for (i in spec[,1]){if(is.null(opt[[i]])) opt[[i]]=spec[j,6];j <- j+1;}
library("fitdistrplus")
library("formattable")
library("GGally")
#source("script/setup.r")
library("mc2d")  ## needed for dtriang
library("ggplot2")
calc.distribution <- function(calc_cent){
dist_name <- c("norm", "exp", "weibull", "lnorm", "gamma", "logis", "cauchy", "gumbel", "triang", "binom")
# cdist
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
# Computation
cdist <- list()
for (i in names(calc_cent)) {
print(i)
dat <- abs(calc_cent[[i]])
fit <- list()
tryCatch({fit$norm    <- fitdist(dat,dist_name[1])} ,error = function(error_condition)                            {})
tryCatch({fit$exp     <- fitdist(dat,dist_name[2])} ,error = function(error_condition)                            {})
tryCatch({fit$weibull <- fitdist(dat,dist_name[3])} ,error = function(error_condition)                            {})
tryCatch({fit$lnorm   <- fitdist(dat,dist_name[4])} ,error = function(error_condition)                            {})
tryCatch({fit$gamma   <- fitdist(dat,dist_name[5])} ,error = function(error_condition)                            {})
tryCatch({fit$logis   <- fitdist(dat,dist_name[6])} ,error = function(error_condition)                            {})
tryCatch({fit$cauchy  <- fitdist(dat,dist_name[7])} ,error = function(error_condition)                            {})
tryCatch({fit$gumbel  <- fitdist(dat,dist_name[8], start=list(a=10,b=5))} ,error = function(error_condition)      {})
tryCatch({fit$triang  <- fitdist(dat,dist_name[9])} ,error = function(error_condition)                            {})
tryCatch({fit$binom   <- fitdist(dat,dist_name[10] ,start=list(size=8, prob=mean(dat)/8))} ,error = function(error_condition)                            {})
cdist[[i]] <- fit
}
return(cdist)
}
calc.probability <- function(calc_cent){
# cdist
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
# Computation
cprob <- list()
for (i in names(calc_cent)){
prob <- list()
prob$norm <- pnorm(calc_cent[[i]])
prob$exp <- pexp(calc_cent[[i]])
prob$weibull <- pweibull(calc_cent[[i]],shape = 1)
prob$lnorm <- plnorm(calc_cent[[i]])
prob$gamma <- pgamma(calc_cent[[i]], shape = 1)
prob$logis <- plogis(calc_cent[[i]])
prob$cauchy <- pcauchy(calc_cent[[i]])
prob$gumbel <- pgumbel(calc_cent[[i]], a = 1, b=1)
prob$binom <- pbinom(calc_cent[[i]], size=2, prob = 0.5)
prob$triang <- ptriang(calc_cent[[i]])
prob$empirical <- ecdf(calc_cent[[i]])(calc_cent[[i]])
cprob[[i]] <- prob
}
return(cprob)
}
plot.aic <- function(cdist, calc_cent){
dist_name <- c("norm", "exp", "weibull", "lnorm", "gamma", "logis", "cauchy", "gumbel", "triang", "binom")
length_dist <- length(dist_name)
pdf("bin/AIC.pdf")
# plot AIC
loglik <-  matrix(nrow=length(calc_cent), ncol=length_dist)
for (i in 1:length(calc_cent)){
for (j in 1:length_dist)
tryCatch({loglik[i,j] <- cdist[[i]][[j]]$loglik}   ,error = function(error_condition) {loglik[i,j] <- NA})
}
loglik <- as.data.frame(loglik)
colnames(loglik)<- dist_name
rownames(loglik)<- paste(c(1:length(calc_cent)),names(calc_cent))
formattable(loglik, row.names=TRUE, list(norm = format, exp = format,weibull = format,lnorm = format,gamma = format,gamm = format,logis = format,cauchy = format))
dev.off()
}
plot.pdf <- function(cdist, calc_cent){
pdf("bin/PDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(cdist), function(i) {
tryCatch({denscomp(cdist[[i]], xlab=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
dev.off()
}
plot.cdf2 <- function(cdist, calc_cent){
pdf("bin/CDF.pdf")
layout(rbind(1:2, 3:4))
lapply(seq_along(cdist), function(i) {
tryCatch({cdfcomp(cdist[[i]],ylab= "CDF (%)", xlab="Delay (ms)", xlim = c(200,500), main=names(calc_cent)[i])}   ,error = function(error_condition) {})
})
dev.off()
}
plot.cdf <- function(cdist, calc_cent){
library(RColorBrewer)
colors <- sort(brewer.pal(6, "Set1"), decreasing = F)
pdf("cdf.eps", width=6, height=6)
j=1
plot(NA,xlim = c(200,500), ylim = c(0,1),xlab=NA,ylab=NA,main=NA) # Empty plot
for (i in c(1,3,10,12)) {
x <- calc_cent[[i]]
curve(plogis(x, cdist[[i]]$logis$estimate[1], cdist[[i]]$logis$estimate[2]), 200, 450, col = colors[j], xlab='Delay (ms)', ylab='CDF (%)', cex.lab=1.5, lwd = 2, add = TRUE)
j<-j+1
}
legend('bottomright', names(calc_cent)[c(1,3,10,12)] , lty=1, col=colors, bty='n', cex=1.2, lw=2)
dev.off()
}
plot.hst <- function(data){
pdf("bin/delay.pdf")
layout(rbind(1:2, 3:4, 5:6))
for (i in c(1,3,5,7,9,11)) {
# par(mar=c(1,1,3,1))
hist(data[[i]], xlab = "Delay (ms)", main=names(data)[i])
}
dev.off()
}
tmp=read.csv(file = opt$file)
calc_cent=as.list(tmp)
cdist <- calc.distribution(calc_cent)
cprob <- calc.probability(calc_cent)
round(cprob[[1]][[1]],4)
lapply(seq_along(cprob), function(i) {
lapply(seq_along(cprob[[i]]), function(j) {
tmp <- round(cprob[[i]][[j]],4)
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
})
lapply(seq_along(cprob), function(i) {
tmp <- lapply(seq_along(cprob[[i]]), function(j) {
round(cprob[[i]][[j]],4)
})
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
lapply(seq_along(cprob), function(i) {
tmp<-c()
tmp2<-c()
lapply(seq_along(cprob[[i]]), function(j) {
tmp <- round(cprob[[i]][[j]],4)
})
tmp2<-cbind(tmp2,tmp)
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
lapply(seq_along(cprob), function(i) {
tmp<-c()
tmp2<-c()
lapply(seq_along(cprob[[i]]), function(j) {
tmp2<-cbind(tmp2,round(cprob[[i]][[j]],4))
})
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
lapply(seq_along(cprob), function(i) {
tmp<-c()
tmp2<-c()
lapply(seq_along(cprob[[i]]), function(j) {
tmp2<-c(tmp2,round(cprob[[i]][[j]],4))
})
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
round(cprob[[2]][[2]],4)
write.csv(round(cprob[[2]][[2]],4),"bin/cprob.csv", row.names = FALSE)
class(round(cprob[[2]][[2]],4))
as.array(round(cprob[[2]][[2]],4))
as.list(round(cprob[[2]][[2]],4))
cx<-as.list(round(cprob[[2]][[2]],4))
cx
write.csv(cx,"bin/cprob.csv", row.names = FALSE)
cx<-as.array(round(cprob[[2]][[2]],4))
cx
write.csv(cx,"bin/cprob.csv", row.names = FALSE)
lapply(seq_along(cprob), function(i) {
lapply(seq_along(cprob[[i]]), function(j) {
tmp[j] <- round(cprob[[i]][[j]],4)
})
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
lapply(seq_along(cprob), function(i) {
tmp<-array()
tmp <- matrix(ncol=length(cprob))
lapply(seq_along(cprob[[i]]), function(j) {
tmp[j] <- round(cprob[[i]][[j]],4)
})
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
lapply(seq_along(cprob), function(i) {
tmp<-array()
tmp <- matrix(ncol=22)
lapply(seq_along(cprob[[i]]), function(j) {
tmp[j] <- round(cprob[[i]][[j]],4)
})
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
lapply(seq_along(cprob), function(i) {
tmp <- matrix(ncol=22)
lapply(seq_along(cprob[[i]]), function(j) {
tmp[j] <- round(cprob[[i]][[j]],4)
})
write.csv(tmp,"bin/cprob.csv", row.names = FALSE)
})
write.csv(cprob,"bin/cprob.csv", row.names = FALSE)
lapply(seq_along(cprob), function(i) {
lapply(seq_along(cprob[[i]]), function(j) {
cprob[[i]][[j]] <- round(cprob[[i]][[j]],4)
})
})
write.csv(cprob,"bin/cprob.csv", row.names = FALSE)
cprob
cprob[[2]][[2]] <- round(cprob[[2]][[2]],4)
cprob[[2]][[2]]
length(cprob)
cprob <- calc.probability(calc_cent)
length(cprob)
seq_along(cprob)
for(i in seq_along(cprob)){
for(j in seq_along(cprob[[i]])){
cprob[[i]][[j]] <- round(cprob[[i]][[j]],4)
}
}
write.csv(cprob,"bin/cprob.csv", row.names = FALSE)
cprob <- calc.probability(calc_cent)
write.csv(cprob,"bin/cprob.csv", row.names = FALSE)
for(i in seq_along(cprob)){
for(j in seq_along(cprob[[i]])){
cprob[[i]][[j]] <- round(cprob[[i]][[j]],4)
}
}
write.csv(cprob,"bin/cprob.csv", row.names = FALSE)
for(i in seq_along(cprob)){
for(j in seq_along(cprob[[i]])){
cprob[[i]][[j]] <- round(cprob[[i]][[j]],4)
}
write.csv(cprob[[i]],"bin/cprob.csv", row.names = FALSE)
}
calc.distribution <- function(calc_cent){
dist_name <- c("norm", "exp", "weibull", "lnorm", "gamma", "logis", "cauchy", "gumbel", "triang", "binom")
# cdist
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
# Computation
cdist <- list()
for (distname in dist_name) {
for (i in names(calc_cent)) {
print(i)
dat <- abs(calc_cent[[i]])
fit <- list()
tryCatch({fit$norm    <- fitdist(dat,distname)} ,error = function(error_condition)                            {})
# tryCatch({fit$exp     <- fitdist(dat,dist_name[2])} ,error = function(error_condition)                            {})
# tryCatch({fit$weibull <- fitdist(dat,dist_name[3])} ,error = function(error_condition)                            {})
# tryCatch({fit$lnorm   <- fitdist(dat,dist_name[4])} ,error = function(error_condition)                            {})
# tryCatch({fit$gamma   <- fitdist(dat,dist_name[5])} ,error = function(error_condition)                            {})
# tryCatch({fit$logis   <- fitdist(dat,dist_name[6])} ,error = function(error_condition)                            {})
# tryCatch({fit$cauchy  <- fitdist(dat,dist_name[7])} ,error = function(error_condition)                            {})
# tryCatch({fit$gumbel  <- fitdist(dat,dist_name[8], start=list(a=10,b=5))} ,error = function(error_condition)      {})
# tryCatch({fit$triang  <- fitdist(dat,dist_name[9])} ,error = function(error_condition)                            {})
# tryCatch({fit$binom   <- fitdist(dat,dist_name[10] ,start=list(size=8, prob=mean(dat)/8))} ,error = function(error_condition)                            {})
cdist[[i]] <- fit
}
}
return(cdist)
}
for(i in seq_along(cprob)){
for(j in seq_along(cprob[[i]])){
cprob[[i]][[j]] <- round(cprob[[i]][[j]],4)
}
write.csv(cprob[[i]],c("bin/cprob",i,".csv"), row.names = FALSE)
}
c("bin/cprob",i,".csv")
c<-"bin/cprob"+i+".csv"
for(i in seq_along(cprob)){
for(j in seq_along(cprob[[i]])){
cprob[[i]][[j]] <- round(cprob[[i]][[j]],4)
}
write.csv(cprob[[i]],paste("bin/cprob",i,".csv"), row.names = FALSE)
}

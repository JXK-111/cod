<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on TTN Stack for LoRaWAN Documentation</title>
    <link>https://thethingsstack.io/v3.1.0/</link>
    <description>Recent content in Overview on TTN Stack for LoRaWAN Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://thethingsstack.io/v3.1.0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependencies</title>
      <link>https://thethingsstack.io/v3.1.0/guides/getting-started/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/guides/getting-started/dependencies/</guid>
      <description>CLI and stack The web interface Console is not yet available. So in this tutorial, we use the command-line interface (CLI) to manage the setup.
You can use the CLI on your local machine or on the server.
 Note: if you need help with any CLI command, use the --help flag to get a list of subcommands, flags and their description and aliases.
 Package managers (recommended) macOS $ brew install TheThingsNetwork/lorawan-stack/ttn-lw-stack  Linux $ sudo snap install ttn-lw-stack $ sudo snap alias ttn-lw-stack.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://thethingsstack.io/v3.1.0/guides/getting-started/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/guides/getting-started/configuration/</guid>
      <description>The stack can be started for development without passing any configuration. However, there are a lot of things you can configure. In this guide we&amp;rsquo;ll set some environment variables in docker-compose.yml. These environment variables will configure the stack as a development server on localhost. For setting up up a public server or for requesting certificates from an ACME provider such as Let&amp;rsquo;s Encrypt, take a closer look at the comments in docker-compose.</description>
    </item>
    
    <item>
      <title>Creating Templates</title>
      <link>https://thethingsstack.io/v3.1.0/reference/end-device-templates/creating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/reference/end-device-templates/creating/</guid>
      <description>Command-line interface only The instructions below use the command-line interface (CLI). Learn how to get started with the CLI  You can create a device template from an existing device or extend an existing device template. You can also create a new template from scratch.
Create from existing device You can use the end-device template create command to create a template from an existing device.
 Note: By default, end-device template create strips the device&amp;rsquo;s application ID, device ID, JoinEUI, DevEUI and server addresses to create a generic template.</description>
    </item>
    
    <item>
      <title>Converting Templates</title>
      <link>https://thethingsstack.io/v3.1.0/reference/end-device-templates/converting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/reference/end-device-templates/converting/</guid>
      <description>Command-line interface only The instructions below use the command-line interface (CLI). Learn how to get started with the CLI  You can convert data in various formats to device templates using formats supported by TTN Stack. Input formats can be vendor-specific information about devices or device data to migrate from another LoRaWAN server stack.
Start with listing the supported formats:
$ ttn-lw-cli end-device template list-formats  This gives the supported formats.</description>
    </item>
    
    <item>
      <title>Running the Stack</title>
      <link>https://thethingsstack.io/v3.1.0/guides/getting-started/running-the-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/guides/getting-started/running-the-stack/</guid>
      <description>You can run the stack using Docker or container orchestration solutions using Docker. An example Docker Compose configuration is available to get started quickly.
With the docker-compose.yml file in the directory of your terminal prompt, enter the following commands to initialize the database, create the first user admin, create the CLI OAuth client and start the stack:
$ docker-compose pull $ docker-compose run --rm stack is-db init $ docker-compose run --rm stack is-db create-admin-user \ --id admin \ --email admin@localhost $ docker-compose run --rm stack is-db create-oauth-client \ --id cli \ --name &amp;quot;Command Line Interface&amp;quot; \ --owner admin \ --no-secret \ --redirect-uri &#39;local-callback&#39; \ --redirect-uri &#39;code&#39; $ docker-compose up  With TTN Stack up and running, it&amp;rsquo;s time to connect gateways, create devices and work with streaming data.</description>
    </item>
    
    <item>
      <title>Executing Templates</title>
      <link>https://thethingsstack.io/v3.1.0/reference/end-device-templates/executing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/reference/end-device-templates/executing/</guid>
      <description>Command-line interface only The instructions below use the command-line interface (CLI). Learn how to get started with the CLI  Once you created or converted a template, you can execute the template with the end-device templates execute command to obtain an end device that can be created.
 The examples use a template that has been created as follows:
$ ttn-lw-cli end-device template extend \ --lorawan-version 1.0.3 \ --lorawan-phy-version 1.0.3-a \ --frequency-plan-id US_902_928 &amp;gt; example.</description>
    </item>
    
    <item>
      <title>Mapping Templates</title>
      <link>https://thethingsstack.io/v3.1.0/reference/end-device-templates/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/reference/end-device-templates/mapping/</guid>
      <description>Command-line interface only The instructions below use the command-line interface (CLI). Learn how to get started with the CLI  You can use the end-device templates map command to map input templates with a mapping file to create new device templates. This allows for combining fields from different device template files.
The matching from input to a mapping template is, in order, by mapping key (mapping_key), end device identifiers (ids.</description>
    </item>
    
    <item>
      <title>Assigning EUIs</title>
      <link>https://thethingsstack.io/v3.1.0/reference/end-device-templates/assigning-euis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/reference/end-device-templates/assigning-euis/</guid>
      <description>Command-line interface only The instructions below use the command-line interface (CLI). Learn how to get started with the CLI  You can use the end-device template assign-euis command to assign the JoinEUI and DevEUI to device templates. The DevEUI is assigned from the given start number. This personalizes the device templates.
You can use the command in two different ways:
 Pipe a number of device templates to assign EUIs to, for example the result of Mapping Templates or Converting Templates Pipe a generic device template, for example the result of Creating Templates, and pass the --count flag to generate a number of personalized device templates  Once the device templates are personalized with EUIs, you can set additional fields (see Creating Templates) or execute templates (see Executing Templates).</description>
    </item>
    
    <item>
      <title>End Device Templates</title>
      <link>https://thethingsstack.io/v3.1.0/concepts/end-device-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://thethingsstack.io/v3.1.0/concepts/end-device-templates/</guid>
      <description>What is it? End device templates define a device that is not created (yet). It can be used to create a device or many devices at once. Templates allows for using common values for many devices, such as a device profile.
Who is it for? End device templates are primarily targeted at device makers and service providers who are managing and onboarding large amounts of devices.
Typical use cases  Create a batch of end devices with the same profile and incrementing DevEUI from a range Convert vendor-specific end device data, such as serial numbers and provisioning data, to a device template Migrate end devices from a different LoRaWAN server stack  How does it work?</description>
    </item>
    
  </channel>
</rss>
